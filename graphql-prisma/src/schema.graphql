type Query{
    me: User!
    posts(query: String): [Post!]!
    users(query: String): [User!]!
    comments : [Comment!]!
}

type Mutation{
    createUser(data:CreateUserInput):User!
    deleteUser(id:ID!):User!
    updateUser(id:ID,data:UpdateUserInput!):User!
    createPost(data:CreatePostInput!):Post!
    deletePost(id:ID!):Post!
    updatePost(id:ID,data:UpdatePostInput!):Post!
    createComment(data:CreateCommentInput!):Comment!
    deleteComment(id:ID!):Comment!
    updateComment(id:ID,data:UpdateCommentInput!):Comment!
}
 
type Subscription{
    count:Int!
    comment(postId:ID!):CommentSubscriptionPayload!
    post:PostSubscriptionPayload!
}

input CreateUserInput{
    name:String!
    email:String!
    age:Int
}
input UpdateUserInput{
    name:String
    email:String
    age:Int
}

input CreatePostInput{
    title:String!
    body:String!
    isPublished:Boolean!
    author:ID!
}
input UpdatePostInput{
    title:String
    body:String
    isPublished:Boolean
}

input CreateCommentInput{
    text:String!
    author:ID!
    post:ID!
}
input UpdateCommentInput{
    text:String
}

type Comment{
    id: ID!
    text: String!
    author: User!
    post: Post!
}
type User{
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}
type Post{
    id: ID!
    title: String!
    body: String!
    isPublished: Boolean
    author: User!
    comments: [Comment!]!
}

type PostSubscriptionPayload{
    mutation:MutationType!
    data:Post!
}

type CommentSubscriptionPayload{
    mutation:MutationType!
    data:Comment!
}

enum MutationType{
    CREATED,
    DELETED,
    UPDATED
}